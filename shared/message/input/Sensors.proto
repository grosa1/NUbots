/*
 * This file is part of the NUbots Codebase.
 *
 * The NUbots Codebase is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The NUbots Codebase is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the NUbots Codebase.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright 2013 NUbots <nubots@nubots.net>
 */

syntax = "proto3";

package message.input;

import "google/protobuf/timestamp.proto";
import "Matrix.proto";
import "Neutron.proto";
import "Vector.proto";

message Sensors {
    /// Full set of information to use a given servo.
    /// Ref: https://emanual.robotis.com/docs/en/dxl/mx/mx-64/ ;
    /// https://emanual.robotis.com/docs/en/dxl/mx/mx-106/
    message Servo {
        /// Set of things which can or have gone wrong.
        /// https://emanual.robotis.com/docs/en/dxl/mx/mx-106/#alarm-led17-shutdown18
        uint32 error_flags = 1;
        uint32 id          = 2;
        /// Whether the torque is on or off
        bool enabled = 3;
        /// Proportional gain. In proportion to the servo's position error. Gain
        /// values are in range 0~254. K_p : p_gain / 8
        float p_gain = 4;
        /// Integral gain. Increases in relation to the error, and how long the
        /// error has persisted. Gain values are in range 0~254.
        /// K_i : i_gain * 1000 / 2048
        float i_gain = 5;
        /// Derivative gain. Does not consider error, just dampens forces to reduce
        /// derivatives. Gain values are in range 0~254. K_d : d_gain * 4 / 1000
        float d_gain = 6;
        /// It is a position value of destination. 0 to 4,095 (0xFFF) is available.
        /// The unit is 0.088 [°]. (FROM
        /// https://emanual.robotis.com/docs/en/dxl/mx/mx-64/#specifications): If
        /// Goal Position is out of the range, Angle Limit Error Bit (Bit1) of
        /// Status Packet is returned as ‘1’ and Alarm is triggered as set in Alarm
        /// LED/Shutdown
        float goal_position = 7;
        float goal_velocity = 8;
        /// The range of the value is 0~4095 (0xFFF), and the unit is 0.088 [°]
        float present_position = 9;
        /// 0 ~ 2,047 (0x000 ~ 0x7FF) can be used. The value unit is about 0.11rpm.
        /// If a value is in the range of 0 ~ 1,023 then the motor rotates to the
        /// counter-clockwise direction. else the motor rotates to the clockwise
        /// direction
        float present_velocity = 10;
        /// The range of the value is 0~2047, and the unit is about 0.1%
        /// If the value is 0~1,023, it means the load works to the CCW direction.
        /// If the value is 1,024~2,047, it means the load works to the CW
        /// direction. That is, the 10th bit becomes the direction bit to control
        /// the direction, and 1,024 is equal to 0. For example, the value is 512,
        /// it means the load is detected in the direction of CCW about 50% of the
        /// maximum torque
        float load = 11;
        /// Present voltage. This value is 10 times larger than the actual voltage.
        /// For example, when 10V is supplied, the data value is 100 (0x64).
        /// If Present Voltage(42) value is out of range, Voltage Range Error Bit
        /// (Bit0) of Status Packet is returned as ‘1’ and Alarm is triggered and
        /// set the address 17 and set 1 to the Bit 0 of the address 18
        float voltage = 12;
        /// Data value is identical to the actual temperature in Celsius
        float temperature = 13;
    }

    message Button {
        uint32 id = 1;
        /// True is pressed, false is unpressed
        bool value = 2;
    }

    message LED {
        uint32 id     = 1;
        uint32 colour = 2;
    }

    message Foot {
        bool down = 1;
        mat4 Hwf  = 2;
    }
    /// When the data were taken/captured
    google.protobuf.Timestamp timestamp = 1;
    /// The values are between 0 and 1023, representing a value between -4g and 4g
    /// => 512 = 0g. Is {x, y, z} acceleration
    vec3 accelerometer = 2;
    /// The values are between 0 and 1023, represent a value between -500 degrees
    /// per second and 500 degrees per second.
    /// => 512 = 0 degrees per second. Is {x, y, z} angular velocity
    vec3 gyroscope = 3;
    /// Isometry3d transform from odometry (world) space to the robot (torso) space.
    /// It measures the world in robot space
    mat4 Htw = 4;
    /// Set of force sensitive resistors. Used to sense if a foot is on the ground
    repeated Foot   feet   = 5 [(array_size) = 2];
    repeated Servo  servo  = 6;
    repeated Button button = 7;
    repeated LED    led    = 8;
    /// Voltage for the whole robot, from the main battery
    float voltage = 9;
    float battery = 10;
    /// A set of transforms; one for each servo
    repeated mat4 Htx = 15 [(array_size) = 20];
    /// Torso to Centre of Mass (CoM) in torso space
    vec4 rMTt = 17;
    mat4 Hgt  = 18;
    /// Inertia tensor measured in particle space and relative to the CoM of the
    /// particle
    mat3 inertia_tensor = 20;
}
